syntax = "proto3";

package polypb.v1;

option go_package = "github.com/ringsaturn/polypb/gen/go/polypb/v1;polypbv1";

// Basic Point data define.
message Point {
  float lng = 1;
  float lat = 2;
}

// Define a polygon, mostly based on GeoJSON's Polygon define.
//
// Excerpt from RFC-9476 section 'Polygon'
//
//   -  A linear ring is a closed LineString with four or more positions.
//   -  The first and last positions are equivalent, and they MUST contain
//     identical values; their representation SHOULD also be identical.
//   -  A linear ring is the boundary of a surface or the boundary of a
//     hole in a surface.
//   -  A linear ring MUST follow the right-hand rule with respect to the
//     area it bounds, i.e., exterior rings are counterclockwise, and
//     holes are clockwise.
//
//   Note: the [GJ2008] specification did not discuss linear ring winding
//   order.  For backwards compatibility, parsers SHOULD NOT reject
//   Polygons that do not follow the right-hand rule.
//
//   Though a linear ring is not explicitly represented as a GeoJSON
//   geometry type, it leads to a canonical formulation of the Polygon
//   geometry type definition as follows:
//
//   -  For type "Polygon", the "coordinates" member MUST be an array of
//     linear ring coordinate arrays.
//   -  For Polygons with more than one of these rings, the first MUST be
//     the exterior ring, and any others MUST be interior rings.  The
//     exterior ring bounds the surface, and the interior rings (if
//     present) bound holes within the surface.
//
// [GJ2008]: https://geojson.org/geojson-spec
//
message Polygon {
  repeated Point points  = 1;  // define the "exterior ring"
  repeated Polygon holes = 2;  // define the "interior rings" as holes
}

message Shape {
  repeated Polygon polygons = 1;  // As multi-polygon
  bytes data                = 2;  // Data for the polygon
}

message Shapes {
  repeated Shape shapes = 1;
  int32 version         = 2;
}

enum CompressMethod {
  COMPRESS_METHOD_UNSPECIFIED = 0;
  COMPRESS_METHOD_POLYLINE    = 1;  // https://developers.google.com/maps/documentation/utilities/polylinealgorithm
}

message CompressedPolygon {
  bytes points                     = 1;
  repeated CompressedPolygon holes = 2;
}

// CompressedShape designed for binary file as small as possible.
message CompressedShape {
  repeated CompressedPolygon polygons = 1;
  bytes data                          = 2;
}

message CompressedShapes {
  CompressMethod method           = 1;
  repeated CompressedShape shapes = 2;
  string version                  = 3;
}

// Preindex tile item.
//
// The X/Y/Z are OSM style like map tile index values.
message PreindexData {
  int32 x = 1;
  int32 y = 2;
  int32 z = 3;
}

// PreindexShapes is all preindex for a polygon.
message PreindexShapes {
  string version              = 1;
  int32 idx_zoom              = 2;  // which zoom value the tiles generated
  int32 agg_zoom              = 3;  // which zoom value the tiles merge up with.
  repeated PreindexData keys = 4;
  bytes data                  = 5;
}
