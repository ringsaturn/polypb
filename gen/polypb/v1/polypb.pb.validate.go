// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: polypb/v1/polypb.proto

package polypbv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Point with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Point) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Point with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PointMultiError, or nil if none found.
func (m *Point) ValidateAll() error {
	return m.validate(true)
}

func (m *Point) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Lng

	// no validation rules for Lat

	if len(errors) > 0 {
		return PointMultiError(errors)
	}

	return nil
}

// PointMultiError is an error wrapping multiple validation errors returned by
// Point.ValidateAll() if the designated constraints aren't met.
type PointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PointMultiError) AllErrors() []error { return m }

// PointValidationError is the validation error returned by Point.Validate if
// the designated constraints aren't met.
type PointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PointValidationError) ErrorName() string { return "PointValidationError" }

// Error satisfies the builtin error interface
func (e PointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PointValidationError{}

// Validate checks the field values on Polygon with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Polygon) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Polygon with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PolygonMultiError, or nil if none found.
func (m *Polygon) ValidateAll() error {
	return m.validate(true)
}

func (m *Polygon) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolygonValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolygonValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolygonValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetHoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PolygonValidationError{
						field:  fmt.Sprintf("Holes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PolygonValidationError{
						field:  fmt.Sprintf("Holes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PolygonValidationError{
					field:  fmt.Sprintf("Holes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PolygonMultiError(errors)
	}

	return nil
}

// PolygonMultiError is an error wrapping multiple validation errors returned
// by Polygon.ValidateAll() if the designated constraints aren't met.
type PolygonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolygonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolygonMultiError) AllErrors() []error { return m }

// PolygonValidationError is the validation error returned by Polygon.Validate
// if the designated constraints aren't met.
type PolygonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolygonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolygonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolygonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolygonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolygonValidationError) ErrorName() string { return "PolygonValidationError" }

// Error satisfies the builtin error interface
func (e PolygonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolygon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolygonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolygonValidationError{}

// Validate checks the field values on Shape with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Shape) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Shape with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ShapeMultiError, or nil if none found.
func (m *Shape) ValidateAll() error {
	return m.validate(true)
}

func (m *Shape) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPolygons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShapeValidationError{
						field:  fmt.Sprintf("Polygons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShapeValidationError{
						field:  fmt.Sprintf("Polygons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShapeValidationError{
					field:  fmt.Sprintf("Polygons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Data

	if len(errors) > 0 {
		return ShapeMultiError(errors)
	}

	return nil
}

// ShapeMultiError is an error wrapping multiple validation errors returned by
// Shape.ValidateAll() if the designated constraints aren't met.
type ShapeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShapeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShapeMultiError) AllErrors() []error { return m }

// ShapeValidationError is the validation error returned by Shape.Validate if
// the designated constraints aren't met.
type ShapeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShapeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShapeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShapeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShapeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShapeValidationError) ErrorName() string { return "ShapeValidationError" }

// Error satisfies the builtin error interface
func (e ShapeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShape.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShapeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShapeValidationError{}

// Validate checks the field values on Shapes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Shapes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Shapes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ShapesMultiError, or nil if none found.
func (m *Shapes) ValidateAll() error {
	return m.validate(true)
}

func (m *Shapes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetShapes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShapesValidationError{
						field:  fmt.Sprintf("Shapes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShapesValidationError{
						field:  fmt.Sprintf("Shapes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShapesValidationError{
					field:  fmt.Sprintf("Shapes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Version

	if len(errors) > 0 {
		return ShapesMultiError(errors)
	}

	return nil
}

// ShapesMultiError is an error wrapping multiple validation errors returned by
// Shapes.ValidateAll() if the designated constraints aren't met.
type ShapesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShapesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShapesMultiError) AllErrors() []error { return m }

// ShapesValidationError is the validation error returned by Shapes.Validate if
// the designated constraints aren't met.
type ShapesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShapesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShapesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShapesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShapesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShapesValidationError) ErrorName() string { return "ShapesValidationError" }

// Error satisfies the builtin error interface
func (e ShapesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShapes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShapesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShapesValidationError{}

// Validate checks the field values on CompressedPolygon with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CompressedPolygon) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompressedPolygon with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompressedPolygonMultiError, or nil if none found.
func (m *CompressedPolygon) ValidateAll() error {
	return m.validate(true)
}

func (m *CompressedPolygon) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Points

	for idx, item := range m.GetHoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompressedPolygonValidationError{
						field:  fmt.Sprintf("Holes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompressedPolygonValidationError{
						field:  fmt.Sprintf("Holes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompressedPolygonValidationError{
					field:  fmt.Sprintf("Holes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CompressedPolygonMultiError(errors)
	}

	return nil
}

// CompressedPolygonMultiError is an error wrapping multiple validation errors
// returned by CompressedPolygon.ValidateAll() if the designated constraints
// aren't met.
type CompressedPolygonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompressedPolygonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompressedPolygonMultiError) AllErrors() []error { return m }

// CompressedPolygonValidationError is the validation error returned by
// CompressedPolygon.Validate if the designated constraints aren't met.
type CompressedPolygonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompressedPolygonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompressedPolygonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompressedPolygonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompressedPolygonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompressedPolygonValidationError) ErrorName() string {
	return "CompressedPolygonValidationError"
}

// Error satisfies the builtin error interface
func (e CompressedPolygonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompressedPolygon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompressedPolygonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompressedPolygonValidationError{}

// Validate checks the field values on CompressedShape with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CompressedShape) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompressedShape with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompressedShapeMultiError, or nil if none found.
func (m *CompressedShape) ValidateAll() error {
	return m.validate(true)
}

func (m *CompressedShape) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPolygons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompressedShapeValidationError{
						field:  fmt.Sprintf("Polygons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompressedShapeValidationError{
						field:  fmt.Sprintf("Polygons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompressedShapeValidationError{
					field:  fmt.Sprintf("Polygons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Data

	if len(errors) > 0 {
		return CompressedShapeMultiError(errors)
	}

	return nil
}

// CompressedShapeMultiError is an error wrapping multiple validation errors
// returned by CompressedShape.ValidateAll() if the designated constraints
// aren't met.
type CompressedShapeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompressedShapeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompressedShapeMultiError) AllErrors() []error { return m }

// CompressedShapeValidationError is the validation error returned by
// CompressedShape.Validate if the designated constraints aren't met.
type CompressedShapeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompressedShapeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompressedShapeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompressedShapeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompressedShapeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompressedShapeValidationError) ErrorName() string { return "CompressedShapeValidationError" }

// Error satisfies the builtin error interface
func (e CompressedShapeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompressedShape.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompressedShapeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompressedShapeValidationError{}

// Validate checks the field values on CompressedShapes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CompressedShapes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompressedShapes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompressedShapesMultiError, or nil if none found.
func (m *CompressedShapes) ValidateAll() error {
	return m.validate(true)
}

func (m *CompressedShapes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Method

	for idx, item := range m.GetShapes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompressedShapesValidationError{
						field:  fmt.Sprintf("Shapes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompressedShapesValidationError{
						field:  fmt.Sprintf("Shapes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompressedShapesValidationError{
					field:  fmt.Sprintf("Shapes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Version

	if len(errors) > 0 {
		return CompressedShapesMultiError(errors)
	}

	return nil
}

// CompressedShapesMultiError is an error wrapping multiple validation errors
// returned by CompressedShapes.ValidateAll() if the designated constraints
// aren't met.
type CompressedShapesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompressedShapesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompressedShapesMultiError) AllErrors() []error { return m }

// CompressedShapesValidationError is the validation error returned by
// CompressedShapes.Validate if the designated constraints aren't met.
type CompressedShapesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompressedShapesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompressedShapesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompressedShapesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompressedShapesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompressedShapesValidationError) ErrorName() string { return "CompressedShapesValidationError" }

// Error satisfies the builtin error interface
func (e CompressedShapesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompressedShapes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompressedShapesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompressedShapesValidationError{}

// Validate checks the field values on PreindexData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PreindexData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreindexData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PreindexDataMultiError, or
// nil if none found.
func (m *PreindexData) ValidateAll() error {
	return m.validate(true)
}

func (m *PreindexData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for Z

	if len(errors) > 0 {
		return PreindexDataMultiError(errors)
	}

	return nil
}

// PreindexDataMultiError is an error wrapping multiple validation errors
// returned by PreindexData.ValidateAll() if the designated constraints aren't met.
type PreindexDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreindexDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreindexDataMultiError) AllErrors() []error { return m }

// PreindexDataValidationError is the validation error returned by
// PreindexData.Validate if the designated constraints aren't met.
type PreindexDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreindexDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreindexDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreindexDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreindexDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreindexDataValidationError) ErrorName() string { return "PreindexDataValidationError" }

// Error satisfies the builtin error interface
func (e PreindexDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreindexData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreindexDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreindexDataValidationError{}

// Validate checks the field values on PreindexShapes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PreindexShapes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreindexShapes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PreindexShapesMultiError,
// or nil if none found.
func (m *PreindexShapes) ValidateAll() error {
	return m.validate(true)
}

func (m *PreindexShapes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for IdxZoom

	// no validation rules for AggZoom

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PreindexShapesValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PreindexShapesValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PreindexShapesValidationError{
					field:  fmt.Sprintf("Keys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Data

	if len(errors) > 0 {
		return PreindexShapesMultiError(errors)
	}

	return nil
}

// PreindexShapesMultiError is an error wrapping multiple validation errors
// returned by PreindexShapes.ValidateAll() if the designated constraints
// aren't met.
type PreindexShapesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreindexShapesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreindexShapesMultiError) AllErrors() []error { return m }

// PreindexShapesValidationError is the validation error returned by
// PreindexShapes.Validate if the designated constraints aren't met.
type PreindexShapesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreindexShapesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreindexShapesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreindexShapesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreindexShapesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreindexShapesValidationError) ErrorName() string { return "PreindexShapesValidationError" }

// Error satisfies the builtin error interface
func (e PreindexShapesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreindexShapes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreindexShapesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreindexShapesValidationError{}
